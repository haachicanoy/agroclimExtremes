# 0 maximally non-contiguous
# 1 maximally contiguous
agex_ctg <- landscapemetrics::lsm_c_contig_mn(landscape = agex_sgn_cln) |> base::as.data.frame()
agex_ctg <- agex_ctg[,c('class','value')]
names(agex_ctg) <- c('extreme_cluster','cls_contiguity')
# Aggregation index
# 0 maximally disaggregated
# 100 maximally aggregated
agex_agr <- landscapemetrics::lsm_c_ai(landscape = agex_sgn_cln) |> base::as.data.frame()
agex_agr <- agex_agr[,c('class','value')]
names(agex_agr) <- c('extreme_cluster','cls_aggregation')
qlt_mtrcs <- dplyr::left_join(x = agex_chs, y = agex_ctg, by = 'extreme_cluster')
qlt_mtrcs <- dplyr::left_join(x = qlt_mtrcs, y = agex_agr, by = 'extreme_cluster')
qlt_mtrcs[,-1] <- round(qlt_mtrcs[,-1], 3)
rm(agex_chs, agex_ctg, agex_agr)
agex_qly_pca <- stats::prcomp(x = qlt_mtrcs[,-1], retx = T, center = T, scale. = T)
qlt_mtrcs$quality_rank <- rank(-1*agex_qly_pca$x[,1])
# Compute diversity of crop types
# High entropy means high variation of food/non-food classes
crp_fls <- list.files(path = paste0(root,'/agroclimExtremes/agex_raw_data'), pattern = '^agex_cropclass_', full.names = T)
crp_fls <- crp_fls[-grep2(pattern = c('fibres','stimulant'), x = crp_fls)]
crp_typ <- terra::rast(crp_fls)
crp_ntp <- terra::app(x = crp_typ, fun = function(i, ff) ff(i), cores = 20, ff = entropy::entropy)
names(crp_ntp) <- 'crop_types_diversity'
plot(crp_ntp)
crp_ntp_25km <- terra::resample(x = crp_ntp, y = agex_sgn_cln, method = 'cubicspline', threads = T)
crp_ntp_25km <- terra::mask(x = crp_ntp_25km, mask = agex_sgn_cln)
# Value of production
vop <- terra::rast(paste0(root,'/agroclimExtremes/agex_raw_data/agex_spam2010V2r0_global_V_agg_VP_CROP_A.tif'))
names(vop) <- 'value_of_production'
vop_25km <- terra::resample(x = vop, y = agex_sgn_cln, method = 'cubicspline', threads = T)
vop_25km <- terra::mask(x = vop_25km, mask = agex_sgn_cln)
# Compute diversity of livestock
lvs_dir <- 'D:/OneDrive - CGIAR/African_Crisis_Observatory/data/_global/livestock'
anmls   <- list.dirs(path = lvs_dir, full.names = F, recursive = F)
anmls   <- anmls[-grep('horses',anmls)]
lvstc_fls <- list.files2(path = paste0(lvs_dir,'/',anmls), pattern = '_Da.tif$', full.names = T); rm(lvs_dir, anmls)
names(lvstc_fls) <- NULL
lvstc_cnt <- terra::rast(lvstc_fls)
# Computing Livestock Units
# LU: Livestock Unit
# LU = Buffaloes * 1 + Cattle * 1 + Chickens * ((0.007 + 0.014)/2) +
#      Ducks * 0.01 + Goats * 0.1 +Pigs * ((0.5+0.027)/2) + Sheep * 0.1
# Source: https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Glossary:Livestock_unit_(LSU)
lsu <- lvstc_cnt[[1]] + lvstc_cnt[[2]] + lvstc_cnt[[3]]*((0.007 + 0.014)/2) + lvstc_cnt[[4]]*0.01 + lvstc_cnt[[5]]*0.1 + lvstc_cnt[[6]]*((0.5+0.027)/2) + lvstc_cnt[[7]]*0.1
rm(lvstc_fls, lvstc_cnt)
names(lsu) <- 'livestock_units'
lsu_25km <- terra::resample(x = lsu, y = agex_sgn_cln, method = 'cubicspline', threads = T)
lsu_25km <- terra::mask(x = lsu_25km, mask = agex_sgn_cln)
# Population density
pop <- geodata::population(year = 2020, res = 10, path = tempdir())
pop_25km <- terra::resample(x = pop, y = agex_sgn_cln, method = 'cubicspline', threads = T)
pop_25km <- terra::mask(x = pop_25km, mask = agex_sgn_cln)
# Index severity
idx <- terra::rast(paste0(root,'/agroclimExtremes/agex_indices/agex_',index,'/agex_',index,'_25km/',gs,'_s',season,'_',index,'_25km.tif'))
idx_avg <- mean(idx); names(idx_avg) <- 'SPEI-6_mean'
idx_mdn <- median(idx); names(idx_mdn) <- 'SPEI-6_median'
idx_max <- max(idx); names(idx_max) <- 'SPEI-6_max'
idx_slp <- terra::app(x = idx, fun = function(i, ff) ff(i), cores = 20, ff = get_trend)
names(idx_slp) <- 'SPEI-6_slope'
idx_sxt <- terra::app(x = idx, fun = function(i, ff) ff(i), cores = 20, ff = get_ext_trend)
names(idx_sxt) <- 'SPEI-6_slope_90th'
rst_mtrcs <- terra::zonal(x = c(pop_25km, vop_25km, crp_ntp_25km, lsu_25km,
idx_avg, idx_mdn, idx_max, idx_slp, idx_sxt),
z = agex_sgn_cln, fun = 'mean', na.rm = T)
rst_mtrcs[,-1] <- round(rst_mtrcs[,-1], 3)
rst_mtrcs
dfm <- dplyr::left_join(x = collaborations, y = rst_mtrcs, by = 'extreme_cluster')
dfm <- dplyr::left_join(x = dfm, y = qlt_mtrcs, by = 'extreme_cluster')
dim(dfm)
agex_sgn_poly <- terra::as.polygons(x = agex_sgn)
agex_sgn_poly <- terra::merge(x = agex_sgn_poly, y = dfm)
nrow(dfm)
terra::writeVector(x = agex_sgn_poly, filename = paste0(root,'/agroclimExtremes/agex_results/clusters/vct_agex_global_',index,'_',gs,'_s',season,'_fmadogram_k',nrow(dfm),'.gpkg'), overwrite = T)
library(rsconnect)
rsconnect::setAccountInfo(name='haachicanoy',
token='A25FA9FC0293572DACC23B01D4B4E414',
secret='xeIIvT6iHlnzw8tnHpvI3HQroxjFNDQxZb2x4Qqu')
library(rsconnect)
rsconnect::deployApp("D:/OneDrive - CGIAR/PhD/papers/paper1/scripts/agroclimExtremes/R/05_figures/agex_05_shiny_map.R")
library(rsconnect)
rsconnect::deployApp("D:/OneDrive - CGIAR/PhD/papers/paper1/scripts/agroclimExtremes/R/05_figures")
rlang::last_trace()
rm(list = ls())
## ------------------------------------------ ##
## Interactive map extreme clusters one season
## By: Harold Achicanoy
## WUR & ABC
## Mar. 2024
## ------------------------------------------ ##
options(warn = -1, scipen = 999)
suppressMessages(if(!require(pacman)){install.packages('pacman')}else{library(pacman)})
pacman::p_load(shiny,terra,leaflet,htmlwidgets,leaflet.extras)
agex_sgn <- terra::vect('https://raw.githubusercontent.com/haachicanoy/agroclimExtremes/main/data/agex_spei-6_one_s1_features.gpkg')
agex_sgn <- sf::st_as_sf(agex_sgn)
col_pltt <- MetBrewer::met.brewer(name = 'Signac', n = nrow(agex_sgn))
set.seed(1235)
col_pltt <- sample(x = col_pltt, size = length(col_pltt), replace = F)
ui <- shiny::bootstrapPage(
tags$style(type='text/css','html, body {width:100%;height:100%}'),
leaflet::leafletOutput('mymap', width='100%', height='100%')
)
server <- function(input, output, session) {
rv <- shiny::reactiveValues()
rv$selected <- NULL
output$mymap <- leaflet::renderLeaflet({
hl_opts <- leaflet::highlightOptions(fillColor = 'yellow', bringToFront = T)
leaflet() |>
addProviderTiles(providers$CartoDB.Positron) |>
addResetMapButton() |>
addSearchOSM() |>
addPolygons(
layerId   = ~ extreme_cluster,
group     = 'cluster',
data      = agex_sgn,
color     = col_pltt,
opacity   = 0.8,
fill      = T,
weight    = 2,
label     = ~ extreme_cluster,
popup     = ~ paste("<div class='leaflet-popup-scrolled' style='max-width:250px;max-height:350px'",
'<br>',
'<b>','Extreme cluster: ','</b>',extreme_cluster,'<br>',
'<b>','Countries count:  ','</b>',countries_count,'<br>',
'<b>','Countries ISO3:  ','</b>',countries,'<br>',
'<b>','Continents:  ','</b>',continents,'<br>',
'<b>','Population density:  ','</b>',population_density,'<br>',
'<b>','Value of production:  ','</b>',value_of_production,'<br>',
'<b>','Crop types diversity:  ','</b>',crop_types_diversity,'<br>',
'<b>','Livestock units:  ','</b>',livestock_units,'<br>',
'<b>','SPEI-6 mean:  ','</b>',`SPEI-6_mean`,'<br>',
'<b>','SPEI-6 median:  ','</b>',`SPEI-6_median`,'<br>',
'<b>','SPEI-6 max:  ','</b>',`SPEI-6_max`,'<br>',
'<b>','SPEI-6 general trend:  ','</b>',`SPEI-6_slope`,'<br>',
'<b>','SPEI-6 95th pr trend:  ','</b>',`SPEI-6_slope_95th`,'<br>',
'<b>','Cluster cohesion: ','</b>',cls_cohesion,'<br>',
'<b>','Cluster contiguity:  ','</b>',cls_contiguity,'<br>',
'<b>','Cluster aggregation:  ','</b>',cls_aggregation,'<br>',
'<b>','Quality rank:  ','</b>',quality_rank,'<br>'),
highlightOptions = hl_opts)
})
output$click_on_shape <- shiny::renderPrint({ input$mymap_shape_click })
shiny::observeEvent(c(input$mymap_shape_click, input$mymap_click), {
new_selected <- shiny::req(input$mymap_shape_click)
shiny::isolate(old_selected <- rv$selected)
if(is.null(old_selected) || new_selected$.nonce != old_selected$.nonce){
shiny::validate( shiny::need(new_selected$group!='selection', message=F) )
rv$selected <- new_selected
i <- which(agex_sgn$extreme_cluster==new_selected$id)
agex_sgn_filtered <- agex_sgn[i,]
leaflet::leafletProxy('mymap') |>
leaflet::clearGroup('selection') |>
addPolygons(
layerId     = ~ extreme_cluster,
group       = 'selection',
data        = agex_sgn_filtered,
fillColor   = ~'cyan',
weight      = 2,
opacity     = 0.4,
fillOpacity = 0.8)
} else {
rv$selected <- NULL
leaflet::leafletProxy('mymap') |>
leaflet::clearGroup('selection')
}
})
}
shiny::shinyApp(ui, server)
## ------------------------------------------ ##
## Interactive map extreme clusters one season
## By: Harold Achicanoy
## WUR & ABC
## Mar. 2024
## ------------------------------------------ ##
options(warn = -1, scipen = 999)
suppressMessages(if(!require(pacman)){install.packages('pacman')}else{library(pacman)})
pacman::p_load(shiny,terra,leaflet,htmlwidgets,leaflet.extras)
agex_sgn <- terra::vect('https://raw.githubusercontent.com/haachicanoy/agroclimExtremes/main/data/agex_spei-6_one_s1_features.gpkg')
agex_sgn <- sf::st_as_sf(agex_sgn)
col_pltt <- MetBrewer::met.brewer(name = 'Signac', n = nrow(agex_sgn))
set.seed(1235)
col_pltt <- sample(x = col_pltt, size = length(col_pltt), replace = F)
ui <- shiny::bootstrapPage(
tags$style(type='text/css','html, body {width:100%;height:100%}'),
leaflet::leafletOutput('mymap', width='100%', height='100%')
)
server <- function(input, output, session) {
rv <- shiny::reactiveValues()
rv$selected <- NULL
output$mymap <- leaflet::renderLeaflet({
hl_opts <- leaflet::highlightOptions(fillColor = 'yellow', bringToFront = T)
leaflet() |>
addProviderTiles(providers$CartoDB.Positron) |>
addResetMapButton() |>
addSearchOSM() |>
addPolygons(
layerId   = ~ extreme_cluster,
group     = 'cluster',
data      = agex_sgn,
color     = col_pltt,
opacity   = 0.8,
fill      = T,
weight    = 2,
label     = ~ extreme_cluster,
popup     = ~ paste("<div class='leaflet-popup-scrolled' style='max-width:250px;max-height:350px'",
'<br>',
'<b>','Extreme cluster: ','</b>',extreme_cluster,'<br>',
'<b>','Countries count:  ','</b>',countries_count,'<br>',
'<b>','Countries ISO3:  ','</b>',countries,'<br>',
'<b>','Continents:  ','</b>',continents,'<br>',
'<b>','Population density:  ','</b>',population_density,'<br>',
'<b>','Value of production:  ','</b>',value_of_production,'<br>',
'<b>','Crop types diversity:  ','</b>',crop_types_diversity,'<br>',
'<b>','Livestock units:  ','</b>',livestock_units,'<br>',
'<b>','SPEI-6 mean:  ','</b>',`SPEI-6_mean`,'<br>',
'<b>','SPEI-6 median:  ','</b>',`SPEI-6_median`,'<br>',
'<b>','SPEI-6 max:  ','</b>',`SPEI-6_max`,'<br>',
'<b>','SPEI-6 general trend:  ','</b>',`SPEI-6_slope`,'<br>',
'<b>','SPEI-6 90th pr trend:  ','</b>',`SPEI-6_slope_90th`,'<br>',
'<b>','Cluster cohesion: ','</b>',cls_cohesion,'<br>',
'<b>','Cluster contiguity:  ','</b>',cls_contiguity,'<br>',
'<b>','Cluster aggregation:  ','</b>',cls_aggregation,'<br>',
'<b>','Quality rank:  ','</b>',quality_rank,'<br>'),
highlightOptions = hl_opts)
})
output$click_on_shape <- shiny::renderPrint({ input$mymap_shape_click })
shiny::observeEvent(c(input$mymap_shape_click, input$mymap_click), {
new_selected <- shiny::req(input$mymap_shape_click)
shiny::isolate(old_selected <- rv$selected)
if(is.null(old_selected) || new_selected$.nonce != old_selected$.nonce){
shiny::validate( shiny::need(new_selected$group!='selection', message=F) )
rv$selected <- new_selected
i <- which(agex_sgn$extreme_cluster==new_selected$id)
agex_sgn_filtered <- agex_sgn[i,]
leaflet::leafletProxy('mymap') |>
leaflet::clearGroup('selection') |>
addPolygons(
layerId     = ~ extreme_cluster,
group       = 'selection',
data        = agex_sgn_filtered,
fillColor   = ~'cyan',
weight      = 2,
opacity     = 0.4,
fillOpacity = 0.8)
} else {
rv$selected <- NULL
leaflet::leafletProxy('mymap') |>
leaflet::clearGroup('selection')
}
})
}
shiny::shinyApp(ui, server)
library(rsconnect)
deployApp()
getwd()
setwd('D:/OneDrive - CGIAR/PhD/papers/paper1/scripts/agroclimExtremes/R/05_figures')
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
View(agex_sgn)
View(agex_sgn)
getwd()
setwd('D:/OneDrive - CGIAR/PhD/papers/paper1/scripts/agroclimExtremes/interactive')
View(agex_sgn)
rm(list = ls())
# R options and packages loading
options(warn = -1, scipen = 999)
suppressMessages(if(!require(pacman)){install.packages('pacman')}else{library(pacman)})
suppressMessages(pacman::p_load(terra,geodata,NbClust,entropy,scales,dplyr,
ggplot2,RColorBrewer,landscapemetrics,
exactextractr,hrbrthemes,OutliersO3))
list.files2 <- Vectorize(FUN = list.files, vectorize.args = 'path')
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
get_trend <- function(x){
if(!all(is.na(x))){
x <- as.numeric(na.omit(x))
y <- as.numeric(trend::sens.slope(x)$estimates)
} else { y <- NA }
return(y)
}
get_ext_trend <- function(x){
if(!all(is.na(x))){
x <- as.numeric(na.omit(x))
dfm <- data.frame(time = 1:length(x), ts = x)
qrf <- quantreg::rq(formula = ts ~ time, tau = .90, data = dfm)
y <- as.numeric(qrf$coefficients[2])
} else { y <- NA }
return(y)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
root   <- '//CATALOGUE/WFP_ClimateRiskPr1'
index  <- 'spei-6'
gs     <- 'one'
season <- 1
# Load extreme weather clusters
fls <- list.files(path = paste0(root,'/agroclimExtremes/agex_results/clusters'), pattern = paste0('agex_global_',index,'_',gs,'_s',season,'_fmadogram_k[0-9][0-9][0-9].tif$'), full.names = T)
agex_sgn <- terra::rast(fls)
names(agex_sgn) <- 'extreme_cluster'
crds_sgn <- terra::as.data.frame(x = agex_sgn, xy = T, cell = T, na.rm = T) # Coordinates
wrl <- rnaturalearth::ne_countries(scale = 'large', returnclass = 'sv')
wrl <- wrl[,c('adm0_iso','name_en','continent','subregion')]
# Pixels number per country
crds_cnt <- crds_cty |>
dplyr::group_by(adm0_iso, extreme_cluster) |>
dplyr::count() |>
dplyr::arrange(extreme_cluster) |>
dplyr::ungroup() |>
base::as.data.frame()
crds_sgn_cln <- terra::as.data.frame(x = agex_sgn_cln, xy = T, cell = T, na.rm = T) # Coordinates
if(!file.exists(gsub('_k[0-9][0-9][0-9].tif$','_clean.tif',fls))){
# -------------------------------------------------------------------------- #
# First cleaning phase: Clean clusters from random miss-classification issues
# -------------------------------------------------------------------------- #
## Extreme clusters to remove
# clt_to_remove <- c(1,21,151)
# Cleaning
agex_sgn_cln <- agex_sgn
agex_sgn_cln[agex_sgn_cln == 1] <- NA
agex_sgn_cln[agex_sgn_cln == 21] <- NA
agex_sgn_cln[agex_sgn_cln == 151] <- NA
for(cl in c(2:20,22:150,152:299)){
cat(paste0('Processing CLUSTER: ',cl,'\n'))
# Cluster filtering # cl <- 292 # 188, 209
aux <- agex_sgn
aux[aux != cl] <- NA
# Get cluster's coordinates
aux_dfm <- terra::as.data.frame(x = aux, xy = T, cell = T, na.rm = T)
# Get outliers from coordinates
out_pre <- OutliersO3::O3prep(data = aux_dfm[,c('x','y')], method = c('HDo','BAC','adjOut','DDC','MCD')) # 'PCS'
out_res <- OutliersO3::O3plotM(out_pre)
# Number of outliers per method
out_cns <- out_res$nOut
print(out_cns)
n_out <- getmode(out_cns)
cat(paste0('Outliers identified: ',n_out,'\n\n'))
if(n_out > 0){
out_cnd <- out_res$outsTable$Method %in% names(which(out_res$nOut == n_out))
out_css <- unique(out_res$outsTable[out_cnd,'Case'])
agex_sgn_cln[aux_dfm[out_css,'cell']] <- NA
}
}
# -------------------------------------------------------------------------- #
# Second cleaning phase: Split clusters that have clear structures (manually)
# -------------------------------------------------------------------------- #
cln_stp <- data.frame(extreme_cluster = c(9,154,131,123,70), tentative_clusters = c(3,2,2,2,2))
cln_stp <- tibble::as.tibble(cln_stp)
cln_stp$extreme_values <- list(c(9,300,301),c(154,302),c(131,303),c(123,304),c(70,305))
for(i in 1:nrow(cln_stp)){
# Filtering to extreme cluster of interest
aux <- agex_sgn_cln
aux[aux != cln_stp$extreme_cluster[i]] <- NA
# Get geographical coordinates
crds_aux <- terra::as.data.frame(x = aux, xy = T, cell = T, na.rm = T)
# Fix a random seed and execute k-means clustering
set.seed(1235)
km <- stats::kmeans(x = crds_aux[,c('x','y')], centers = cln_stp$tentative_clusters[i])
replace(x = km$cluster, list = c(cln_stp$extreme_cluster[i],300,301), values = 1:3)
# Cluster values
cls_values <- km$cluster
# Reference extreme cluster values
ref_values <- cln_stp$extreme_values[[i]]
# Original k-means values
kms_values <- unique(cls_values)
upt_values <- c(ref_values, cls_values)[match(cls_values, c(kms_values, cls_values))]
crds_aux$kmeans_cluster <- upt_values
agex_sgn_cln[crds_aux$cell] <- crds_aux$kmeans_cluster
}
# -------------------------------------------------------------------------- #
# Third cleaning phase: cluster 9 correction
# -------------------------------------------------------------------------- #
aux <- agex_sgn_cln
aux[aux != 9] <- NA
# Get cluster's coordinates
aux_dfm <- terra::as.data.frame(x = aux, xy = T, cell = T, na.rm = T)
# Get outliers from coordinates
out_pre <- OutliersO3::O3prep(data = aux_dfm[,c('x','y')], method = c('HDo','BAC','adjOut','DDC','MCD')) # 'PCS'
out_res <- OutliersO3::O3plotM(out_pre)
# Number of outliers per method
out_cns <- out_res$nOut
print(out_cns)
n_out <- getmode(out_cns)
cat(paste0('Outliers identified: ',n_out,'\n\n'))
if(n_out > 0){
out_cnd <- out_res$outsTable$Method %in% names(which(out_res$nOut == n_out))
out_css <- unique(out_res$outsTable[out_cnd,'Case'])
agex_sgn_cln[aux_dfm[out_css,'cell']] <- NA
}
terra::writeRaster(x = agex_sgn_cln, filename = gsub('_k[0-9][0-9][0-9].tif$','_clean.tif',fls), overwrite = T)
} else {
agex_sgn_cln <- terra::rast(gsub('_k[0-9][0-9][0-9].tif$','_clean.tif',fls))
}
crds_sgn_cln <- terra::as.data.frame(x = agex_sgn_cln, xy = T, cell = T, na.rm = T) # Coordinates
# Pixels within countries
crds_cty <- terra::intersect(x = wrl, y = terra::vect(crds_sgn_cln, c('x','y'), crs = 'EPSG:4326')) |> base::as.data.frame()
# Pixels number per country
crds_cnt <- crds_cty |>
dplyr::group_by(adm0_iso, extreme_cluster) |>
dplyr::count() |>
dplyr::arrange(extreme_cluster) |>
dplyr::ungroup() |>
base::as.data.frame()
View(crds_cnt)
View(crds_cty)
# Pixels number per country
crds_cnt <- crds_cty |>
dplyr::group_by(adm0_iso, extreme_cluster) |>
dplyr::count() |>
dplyr::arrange(extreme_cluster) |>
dplyr::ungroup() |>
base::as.data.frame()
View(crds_cnt)
# Unique geographies
unq_geos <- unique(crds_cty[,c('adm0_iso','name_en','continent','subregion','extreme_cluster')])
unq_geos <- base::as.data.frame(dplyr::arrange(.data = unq_geos, extreme_cluster))
View(unq_geos)
# Identify collaboration opportunities among countries
vls <- sort(unique(unq_geos$extreme_cluster))
vls
# Identify collaboration opportunities among countries
vls <- sort(unique(unq_geos$extreme_cluster))
vls
collaborations <- lapply(vls, function(i){
smm <- data.frame(extreme_cluster = i,
countries_count = length(unq_geos[unq_geos$extreme_cluster == i,'adm0_iso']),
isos = paste0(unq_geos[unq_geos$extreme_cluster == i,'adm0_iso'], collapse = ','),
countries = paste0(unq_geos[unq_geos$extreme_cluster == i,'name_en'], collapse = ','),
continents = paste0(unique(unq_geos[unq_geos$extreme_cluster == i,'continent']), collapse = ',') # ,
# regions = paste0(unique(unq_geos[unq_geos$extreme_cluster == i,'subregion']), collapse = ',')
)
return(smm)
}) |> dplyr::bind_rows()
View(collaborations)
unq_geos$extreme_cluster
# Cluster quality measures
# They are computed to get rid of anomalous signatures
# Cohesion index
# 0 if patches of class become more isolated
# 100 if patches of class i become more aggregated
agex_chs <- landscapemetrics::lsm_c_cohesion(landscape = agex_sgn_cln) |> base::as.data.frame()
agex_chs <- agex_chs[,c('class','value')]
names(agex_chs) <- c('extreme_cluster','cls_cohesion')
# Contiguity index mean: equals the mean of the contiguity index on class level for all patches
# 0 maximally non-contiguous
# 1 maximally contiguous
agex_ctg <- landscapemetrics::lsm_c_contig_mn(landscape = agex_sgn_cln) |> base::as.data.frame()
agex_ctg <- agex_ctg[,c('class','value')]
names(agex_ctg) <- c('extreme_cluster','cls_contiguity')
# Aggregation index
# 0 maximally disaggregated
# 100 maximally aggregated
agex_agr <- landscapemetrics::lsm_c_ai(landscape = agex_sgn_cln) |> base::as.data.frame()
agex_agr <- agex_agr[,c('class','value')]
names(agex_agr) <- c('extreme_cluster','cls_aggregation')
qlt_mtrcs <- dplyr::left_join(x = agex_chs, y = agex_ctg, by = 'extreme_cluster')
qlt_mtrcs <- dplyr::left_join(x = qlt_mtrcs, y = agex_agr, by = 'extreme_cluster')
qlt_mtrcs[,-1] <- round(qlt_mtrcs[,-1], 3)
rm(agex_chs, agex_ctg, agex_agr)
agex_qly_pca <- stats::prcomp(x = qlt_mtrcs[,-1], retx = T, center = T, scale. = T)
qlt_mtrcs$quality_rank <- rank(-1*agex_qly_pca$x[,1])
View(qlt_mtrcs)
crp_fls <- list.files(path = paste0(root,'/agroclimExtremes/agex_raw_data'), pattern = '^agex_cropclass_', full.names = T)
crp_fls <- crp_fls[-grep2(pattern = c('fibres','stimulant'), x = crp_fls)]
crp_typ <- terra::rast(crp_fls)
crp_ntp <- terra::app(x = crp_typ, fun = function(i, ff) ff(i), cores = 20, ff = entropy::entropy)
names(crp_ntp) <- 'crop_types_diversity'
plot(crp_ntp)
crp_ntp_25km <- terra::resample(x = crp_ntp, y = agex_sgn_cln, method = 'cubicspline', threads = T)
crp_ntp_25km <- terra::mask(x = crp_ntp_25km, mask = agex_sgn_cln)
# Value of production
vop <- terra::rast(paste0(root,'/agroclimExtremes/agex_raw_data/agex_spam2010V2r0_global_V_agg_VP_CROP_A.tif'))
names(vop) <- 'value_of_production'
vop_25km <- terra::resample(x = vop, y = agex_sgn_cln, method = 'cubicspline', threads = T)
vop_25km <- terra::mask(x = vop_25km, mask = agex_sgn_cln)
# Compute diversity of livestock
lvs_dir <- 'D:/OneDrive - CGIAR/African_Crisis_Observatory/data/_global/livestock'
anmls   <- list.dirs(path = lvs_dir, full.names = F, recursive = F)
anmls   <- anmls[-grep('horses',anmls)]
lvstc_fls <- list.files2(path = paste0(lvs_dir,'/',anmls), pattern = '_Da.tif$', full.names = T); rm(lvs_dir, anmls)
names(lvstc_fls) <- NULL
lvstc_cnt <- terra::rast(lvstc_fls)
lsu <- lvstc_cnt[[1]] + lvstc_cnt[[2]] + lvstc_cnt[[3]]*((0.007 + 0.014)/2) + lvstc_cnt[[4]]*0.01 + lvstc_cnt[[5]]*0.1 + lvstc_cnt[[6]]*((0.5+0.027)/2) + lvstc_cnt[[7]]*0.1
rm(lvstc_fls, lvstc_cnt)
names(lsu) <- 'livestock_units'
lsu_25km <- terra::resample(x = lsu, y = agex_sgn_cln, method = 'cubicspline', threads = T)
lsu_25km <- terra::mask(x = lsu_25km, mask = agex_sgn_cln)
# Population density
pop <- geodata::population(year = 2020, res = 10, path = tempdir())
pop_25km <- terra::resample(x = pop, y = agex_sgn_cln, method = 'cubicspline', threads = T)
pop_25km <- terra::mask(x = pop_25km, mask = agex_sgn_cln)
idx <- terra::rast(paste0(root,'/agroclimExtremes/agex_indices/agex_',index,'/agex_',index,'_25km/',gs,'_s',season,'_',index,'_25km.tif'))
idx_avg <- mean(idx); names(idx_avg) <- 'SPEI-6_mean'
idx_mdn <- median(idx); names(idx_mdn) <- 'SPEI-6_median'
idx_max <- max(idx); names(idx_max) <- 'SPEI-6_max'
idx_slp <- terra::app(x = idx, fun = function(i, ff) ff(i), cores = 20, ff = get_trend)
names(idx_slp) <- 'SPEI-6_slope'
idx_sxt <- terra::app(x = idx, fun = function(i, ff) ff(i), cores = 20, ff = get_ext_trend)
names(idx_sxt) <- 'SPEI-6_slope_90th'
rst_mtrcs <- terra::zonal(x = c(pop_25km, vop_25km, crp_ntp_25km, lsu_25km,
idx_avg, idx_mdn, idx_max, idx_slp, idx_sxt),
z = agex_sgn_cln, fun = 'mean', na.rm = T)
rst_mtrcs[,-1] <- round(rst_mtrcs[,-1], 3)
dfm <- dplyr::left_join(x = collaborations, y = rst_mtrcs, by = 'extreme_cluster')
dfm <- dplyr::left_join(x = dfm, y = qlt_mtrcs, by = 'extreme_cluster')
agex_sgn_poly <- terra::as.polygons(x = agex_sgn_cln)
agex_sgn_poly <- terra::merge(x = agex_sgn_poly, y = dfm)
agex_sgn_poly
terra::writeVector(x = agex_sgn_poly, filename = paste0(root,'/agroclimExtremes/agex_results/clusters/vct_agex_global_',index,'_',gs,'_s',season,'_fmadogram_k',nrow(dfm),'.gpkg'), overwrite = T)
terra::writeVector(x = agex_sgn_poly, filename = paste0(root,'/agroclimExtremes/agex_results/clusters/vct_agex_global_',index,'_',gs,'_s',season,'_fmadogram_k',nrow(dfm),'.gpkg'), overwrite = T)
